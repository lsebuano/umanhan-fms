@inject DialogService DialogService
@inject TaskService TaskService
@inject ProductTypeService ProductTypeService
@inject ProductService ProductService
@inject StaffService StaffService
@inject FarmActivityService FarmActivityService
@inject AppNotificationService NotificationService
@inject FarmCropService FarmCropService
@inject IValidator<FarmActivityDto> Validator

<RadzenRow>
    <RadzenColumn Size="4">
        <RadzenStack Orientation="Orientation.Vertical" Gap="0" class="rz-h-100">
            <RadzenCard class="rz-h-100">
                <RadzenText TextStyle="TextStyle.Body1" class="rz-mb-5"><b>Activity Details</b></RadzenText>
                <RadzenTemplateForm TItem="FarmActivityDto" Data="@Model" Submit=@OnSubmit>
                    <RadzenStack Gap="1rem">
                        <FluentValidationValidator Validator="@Validator" />

                        <RadzenRow AlignItems="AlignItems.Center">
                            <RadzenColumn Size="12" SizeMD="4">
                                <RadzenLabel Text="Type" Component="ProductTypeId" />
                            </RadzenColumn>
                            <RadzenColumn Size="12" SizeMD="8">
                                <RadzenDropDown class="umh-width-100" Data=@productTypes Placeholder="Select type" TextProperty="ProductTypeName" ValueProperty="TypeId"
                                                AllowClear="false" @bind-Value="@Model.ProductTypeId" Name="TypeId" Change="OnTypeChange" />
                                <ValidationMessage For="@(() => Model.ProductTypeId)" />
                            </RadzenColumn>
                        </RadzenRow>

                        <RadzenRow AlignItems="AlignItems.Center">
                            <RadzenColumn Size="12" SizeMD="4">
                                <RadzenLabel Text="Product" Component="ProductId" />
                            </RadzenColumn>
                            <RadzenColumn Size="12" SizeMD="8">
                                <RadzenDropDown @bind-Value="@Model.ProductId" Data="@products" Placeholder="Select product" class="umh-width-100"
                                                TextProperty="ProductName" ValueProperty="ProductId" Name="ProductId" />
                                <ValidationMessage For="@(() => Model.ProductId)" />
                            </RadzenColumn>
                        </RadzenRow>

                        <RadzenRow AlignItems="AlignItems.Center">
                            <RadzenColumn Size="12" SizeMD="4">
                                <RadzenLabel Text="Zone" />
                            </RadzenColumn>
                            <RadzenColumn Size="12" SizeMD="8">
                                <RadzenBadge Shade="Shade.Lighter" BadgeStyle="BadgeStyle.Success" Text="@cropFarmZone" class="umh-padding-12px"/>
                            </RadzenColumn>
                        </RadzenRow>

                        <RadzenRow AlignItems="AlignItems.Center">
                            <RadzenColumn Size="12" SizeMD="4">
                                <RadzenLabel Text="Task" Component="TaskId" />
                            </RadzenColumn>
                            <RadzenColumn Size="12" SizeMD="8">
                                <RadzenDropDown @bind-Value="@Model.TaskId" AllowClear="false" Placeholder="Select task" Data="@tasks" class="umh-width-100"
                                                TextProperty="TaskName" ValueProperty="TaskId" Name="TaskId" AllowSelectAll=false
                                                AllowFiltering="true" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" />
                                <ValidationMessage For="@(() => Model.TaskId)" />
                            </RadzenColumn>
                        </RadzenRow>

                        <RadzenRow AlignItems="AlignItems.Center">
                            <RadzenColumn Size="12" SizeMD="4">
                                <RadzenLabel Text="Activity Supervisor" Component="SupervisorId" />
                            </RadzenColumn>
                            <RadzenColumn Size="12" SizeMD="8">
                                <RadzenDropDown @bind-Value="@Model.SupervisorId" Data="@staffs" Placeholder="Select supervisor" class="umh-width-100"
                                                TextProperty="Name" ValueProperty="StaffId" Name="SupervisorId" />
                                <ValidationMessage For="@(() => Model.SupervisorId)" />
                            </RadzenColumn>
                        </RadzenRow>

                        <RadzenRow AlignItems="AlignItems.Center">
                            <RadzenColumn Size="12" SizeMD="4">
                                <RadzenLabel Text="Start" Component="StartDateTime" />
                            </RadzenColumn>
                            <RadzenColumn Size="12" SizeMD="8">
                                <RadzenDatePicker @bind-Value="@Model.StartDateTime" Name="StartDateTime" ShowTime="true" />
                                <ValidationMessage For="@(() => Model.StartDateTime)" />
                            </RadzenColumn>
                        </RadzenRow>

                        <RadzenRow AlignItems="AlignItems.Center">
                            <RadzenColumn Size="12" SizeMD="4">
                                <RadzenLabel Text="End" Component="EndDateTime" />
                            </RadzenColumn>
                            <RadzenColumn Size="12" SizeMD="8">
                                <RadzenDatePicker @bind-Value="@Model.EndDateTime" Name="EndDateTime" ShowTime="true" />
                                <ValidationMessage For="@(() => Model.EndDateTime)" />
                            </RadzenColumn>
                        </RadzenRow>

                        <RadzenRow AlignItems="AlignItems.Center">
                            <RadzenColumn Size="12" SizeMD="4">
                                <RadzenLabel Text="Notes" Component="Notes" />
                            </RadzenColumn>
                            <RadzenColumn Size="12" SizeMD="8">
                                <RadzenTextArea @bind-Value="@Model.Notes" Name="Notes" class="umh-width-100" Rows="5" />
                                <ValidationMessage For="@(() => Model.Notes)" />
                            </RadzenColumn>
                        </RadzenRow>
                    </RadzenStack>

                    <RadzenFooter>
                        <RadzenStack Orientation="Orientation.Horizontal" JustifyContent="JustifyContent.Center" Gap="0.5rem">
                            <RadzenButton Text="Cancel" Click="() => DialogService.Close(null)" ButtonStyle="ButtonStyle.Light" />
                            <RadzenButton Text=@(isSaving ? "Saving..." : "Save") Icon=@(isSaving ? "hourglass" : "check") ButtonType="ButtonType.Submit" Disabled="isSaving" />
                        </RadzenStack>
                    </RadzenFooter>
                </RadzenTemplateForm>
            </RadzenCard>
        </RadzenStack>
    </RadzenColumn>

    <RadzenColumn Size="8">
        <RadzenStack Orientation="Orientation.Vertical" Gap="0" class="rz-h-100">
            <RadzenCard class="rz-h-100">
                <RadzenText TextStyle="TextStyle.Body1" class="rz-mb-5"><b>Expenses Details</b></RadzenText>

                <RadzenTabs TabPosition="TabPosition.Top" RenderMode="TabRenderMode.Client">
                    <Tabs>
                        <RadzenTabsItem Text="Activity Expenses">
                            <FarmExpenseActivityExpense Model="@Model" />
                        </RadzenTabsItem>
                        <RadzenTabsItem Text="Labor Costs">
                            <FarmExpenseLaborCost Model="@Model" />
                        </RadzenTabsItem>
                        <RadzenTabsItem Text="Usage">
                            <FarmExpenseUsageExpense Model="@Model" />
                        </RadzenTabsItem>
                        <RadzenTabsItem Text="Photos">
                            <FarmActivityPhotos Model="@Model" />
                        </RadzenTabsItem>
                    </Tabs>
                </RadzenTabs>
            </RadzenCard>
        </RadzenStack>
    </RadzenColumn>
</RadzenRow>

@code {
    [Parameter]
    public FarmActivityDto Model { get; set; }

    private IEnumerable<TaskDto> tasks = [];
    private IEnumerable<ProductTypeDto> productTypes = [];
    private IEnumerable<ProductDto> products = [];
    private IEnumerable<StaffDto> staffs = [];
    private IEnumerable<FarmActivityLaborerDto> laborExpenses = [];
    private IEnumerable<FarmActivityUsageDto> usageExpenses = [];

    private EditContext editContext;
    private bool isSaving;
    private bool isSuccess;
    private string message;

    RadzenDataGrid<FarmActivityLaborerDto> expense2Grid;
    RadzenDataGrid<FarmActivityUsageDto> expense3Grid;

    List<FarmActivityLaborerDto> expense2ToInsert = [];
    List<FarmActivityLaborerDto> expense2ToUpdate = [];

    List<FarmActivityUsageDto> expense3ToInsert = [];
    List<FarmActivityUsageDto> expense3ToUpdate = [];

    string cropFarmZone = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        //Console.WriteLine(">>>>>>>>>>>>>OnInitializedAsync");

        var task = DialogService.OpenAsync("", ds => @<BusyDialog />,
        new DialogOptions { ShowTitle = false, CloseDialogOnEsc = false, CssClass = "umh-rz-dialog-size" });

        await LoadTypes().ConfigureAwait(false);
        await LoadTasks().ConfigureAwait(false);
        await LoadStaffs().ConfigureAwait(false);
        await LoadProducts().ConfigureAwait(false);

        await GetProductFarmZone().ConfigureAwait(false);

        editContext = new EditContext(Model);
        DialogService.Close(Model);
    }

    // protected override void OnParametersSet()
    // {
    //     Console.WriteLine(">>>>>>>>>>>>>OnParametersSet");

    //     // selectedProductTypeId = Model.ProductTypeId;
    // }

    async Task GetProductFarmZone()
    {
        var response = await FarmCropService.GetFarmCropByCropIdAsync(Model.ProductId).ConfigureAwait(false);
        if (response.IsSuccess)
        {
            var farmCrop = response.Data;
            cropFarmZone = farmCrop.ZoneName;
        }
        else
            cropFarmZone = "N/A";
    }

    async Task OnTypeChange()
    {
        await LoadProducts().ConfigureAwait(false);
    }

    async Task LoadTasks()
    {
        var response = await TaskService.GetTasksForFarmActivitiesAsync().ConfigureAwait(false);
        if (response.IsSuccess)
            tasks = response.Data;
        else
            await NotificationService.ShowError(response.ErrorMessage, response.ErrorTitle);
    }

    async Task LoadTypes()
    {
        var response = await ProductTypeService.GetAllProductTypesAsync().ConfigureAwait(false);
        if (response.IsSuccess)
            productTypes = response.Data;
        else
            await NotificationService.ShowError(response.ErrorMessage, response.ErrorTitle);
    }

    async Task LoadProducts()
    {
        //var typeId = selectedProductTypeId == Guid.Empty ? Model.ProductTypeId : selectedProductTypeId;
        var typeId = Model.ProductTypeId;
        if (typeId == Guid.Empty)
        {
            products = new List<ProductDto>();
            return;
        }

        var response = await ProductService.GetProductsByFarmByTypeAsync(Model.FarmId, typeId).ConfigureAwait(false);
        if (response.IsSuccess)
            products = response.Data;
        else
            await NotificationService.ShowError(response.ErrorMessage, response.ErrorTitle);
    }

    async Task LoadStaffs()
    {
        var response = await StaffService.GetStaffsByFarmAsync(Model.FarmId).ConfigureAwait(false);
        if (response.IsSuccess)
            staffs = response.Data;
        else
            await NotificationService.ShowError(response.ErrorMessage, response.ErrorTitle);
    }

    private async Task OnSubmit(FarmActivityDto model)
    {
        //Console.WriteLine(">>>>>>>>>>>>>OnSubmit");
        if (isSaving) return;

        if (!editContext.Validate())
        {
            Console.WriteLine("Form validation failed!");
            return;
        }

        isSaving = true;

        var task = DialogService.OpenAsync("", ds => @<BusyDialog />,
        new DialogOptions { ShowTitle = false, CloseDialogOnEsc = false, CssClass = "umh-rz-dialog-size" });

        try
        {
            var response = await FarmActivityService.UpdateFarmActivitiesAsync(model).ConfigureAwait(false);
            if (response == null)
            {
                message = "An error occurred while saving your data.";
                await DialogService.Alert($"Error: {message}", "Error");
            }
            else
            {
                message = "Save successful.";
                isSuccess = true;
                await NotificationService.ShowSuccess(message);
            }
            DialogService.Close(null);
            DialogService.Close(model);
        }
        catch (Exception ex)
        {
            await DialogService.Alert($"Error: {ex.Message}", "Error");
        }
        finally
        {
            isSaving = false;
            if (isSuccess)
                DialogService.Close(null); // close the parent dialog
        }
    }

    
}