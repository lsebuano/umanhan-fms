@inject DialogService DialogService
@inject FarmZoneService FarmZoneService
@inject AppNotificationService NotificationService
@inject IValidator<FarmZoneDto> Validator
@inject CropService CropService
@inject UnitService UnitService

<RadzenTemplateForm TItem="FarmZoneDto" Data="@obj" Submit="SaveChanges">
    <RadzenRow>
        <RadzenColumn Size="6" SizeMD="6">
            <RadzenStack>
                <RadzenText TextStyle="TextStyle.Body1" class="umh-fw-bold" Text="Zone Details" />
                <FluentValidationValidator Validator="@Validator" />

                <RadzenFormField Text="Name" Variant="Variant.Text">
                    <RadzenTextBox @bind-Value="obj.ZoneName" />
                </RadzenFormField>
                <ValidationMessage For="@(() => obj.ZoneName)" />

                <RadzenFormField Text="Description" Variant="Variant.Text">
                    <RadzenTextBox @bind-Value="obj.Description" />
                </RadzenFormField>
                <ValidationMessage For="@(() => obj.Description)" />

                <RadzenFormField Text="Irrigation Type" Variant="Variant.Text">
                    <RadzenTextBox @bind-Value="obj.IrrigationType" />
                </RadzenFormField>
                <ValidationMessage For="@(() => obj.IrrigationType)" />

                <RadzenFormField Text="Zone Size (Hectares)" Variant="Variant.Text">
                    <RadzenNumeric @bind-Value="obj.SizeInHectares" Format="n1" />
                </RadzenFormField>
                <ValidationMessage For="@(() => obj.SizeInHectares)" />

                <RadzenFormField Text="Centroid Lat" Variant="Variant.Flat">
                    <RadzenNumeric @bind-Value="obj.FarmCentroidLat" Disabled="true" class="rz-color-base-700"></RadzenNumeric>
                </RadzenFormField>

                <RadzenFormField Text="Centroid Lng" Variant="Variant.Flat">
                    <RadzenNumeric @bind-Value="obj.FarmCentroidLng" Disabled="true" class="rz-color-base-700"></RadzenNumeric>
                </RadzenFormField>

                <RadzenFormField Text="Zone Color" Variant="Variant.Text">
                    <RadzenColorPicker @bind-Value="obj.ZoneColor" ShowHSV="true" ShowRGBA="true"
                                       ShowColors="true" ShowButton="true" Change=@OnChange
                                       class="umh-width-150px" />
                </RadzenFormField>
                <ValidationMessage For="@(() => obj.ZoneColor)" />
            </RadzenStack>
        </RadzenColumn>
        <RadzenColumn Size="6" SizeMD="6">
            <RadzenStack>
                <RadzenText TextStyle="TextStyle.Body1" class="umh-fw-bold" Text="Crop Details" />

                <RadzenFormField Text="Crop" Variant="Variant.Text">
                    <RadzenDropDown FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
                                    FilterOperator="StringFilterOperator.StartsWith" AllowFiltering="true" 
                                    Data=@crops TextProperty="@nameof(CropDto.CropName)" ValueProperty="@nameof(CropDto.CropId)"
                                    AllowClear="true" @bind-Value="obj.CropId" Name="CropId" />
                </RadzenFormField>
                <ValidationMessage For="@(() => obj.CropId)" />

                <RadzenFormField Text="Unit" Variant="Variant.Text">
                    <RadzenDropDown FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
                                    FilterOperator="StringFilterOperator.StartsWith" AllowFiltering="true"
                                    Data=@units TextProperty="@nameof(UnitDto.UnitName)" ValueProperty="@nameof(UnitDto.UnitId)"
                                    AllowClear="true" @bind-Value="obj.UnitId" Name="UnitId" />
                </RadzenFormField>
                <ValidationMessage For="@(() => obj.UnitId)" />
                <RadzenFormField Text="Variety" Variant="Variant.Text">
                    <RadzenTextBox @bind-Value="obj.CropVariety" />
                </RadzenFormField>
                <ValidationMessage For="@(() => obj.CropVariety)" />
            </RadzenStack>
        </RadzenColumn>
    </RadzenRow>
    <RadzenFooter>
        <RadzenStack Orientation="Orientation.Horizontal" JustifyContent="JustifyContent.Center" Gap="0.5rem">
            <RadzenButton Text="Cancel" Click="() => DialogService.Close(false)" ButtonStyle="ButtonStyle.Light" />
            <RadzenButton Text=@(isSaving ? "Saving..." : "Save") Icon=@(isSaving ? "hourglass" : "check") Type="Submit" Disabled="isSaving" />
        </RadzenStack>
    </RadzenFooter>
</RadzenTemplateForm>

@code {
    [Parameter] public Guid ObjId { get; set; }
    [Parameter] public double Lat { get; set; }
    [Parameter] public double Lng { get; set; }
    [Parameter] public string ZoneName { get; set; }
    [Parameter] public string Color { get; set; }
    [Parameter] public double AreaSqm { get; set; }
    [Parameter] public double AreaHA { get; set; }
    [Parameter] public string ZoneBoundary { get; set; }
    [Parameter] public List<LatLng> FarmBoundary { get; set; }
    [Parameter] public LatLng FarmCentroid { get; set; }
    [Parameter] public string FarmLocation { get; set; }
    [Parameter] public double FarmSizeSqm { get; set; }
    [Parameter] public double FarmSizeHA { get; set; }
    [Parameter] public Guid FarmId { get; set; }
    [Parameter] public FarmCropDto FarmCrop { get; set; }

    private IEnumerable<CropDto> crops;
    private IEnumerable<UnitDto> units;

    private FarmZoneDto obj;
    private EditContext editContext;
    private bool isSaving;
    private string title = "Message";
    private string message;

    protected override async Task OnInitializedAsync()
    {
        if (obj == null)
        {
            obj = new FarmZoneDto();
        }

        // zone details
        obj.ZoneId = ObjId;
        obj.ZoneName = ZoneName;
        obj.ZoneColor = Color;
        obj.AreaInSqm = Convert.ToDecimal(AreaSqm);
        obj.SizeInHectares = Convert.ToDecimal(AreaHA);
        obj.ZoneCentroidLat = Lat;
        obj.ZoneCentroidLng = Lng;
        obj.ZoneBoundaryJson = ZoneBoundary;

        // farm details
        obj.FarmId = FarmId;
        obj.FarmBoundaryJson = JsonSerializer.Serialize(FarmBoundary);
        obj.FarmLocation = FarmLocation;
        obj.FarmCentroidLat = FarmCentroid.Lat;
        obj.FarmCentroidLng = FarmCentroid.Lng;
        obj.FarmSizeInHectares = Convert.ToDecimal(FarmSizeHA);
        obj.FarmSizeInSqm = Convert.ToDecimal(FarmSizeSqm);

        if (FarmCrop != null)
        {
            obj.CropId = FarmCrop.CropId;
            obj.CropName = FarmCrop.CropName;
            obj.CropVariety = FarmCrop.CropVariety;
            obj.UnitId = FarmCrop.UnitId;
        }

        // initialize the context
        editContext = new EditContext(obj);
    }

    protected override async Task OnParametersSetAsync()
    {
        await base.OnParametersSetAsync().ConfigureAwait(false);
        // update the context
        editContext = new EditContext(obj);
    }

    protected override Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            // Load crops and units only once
            return Task.WhenAll(LoadCrops(), LoadUnits());
        }
        return Task.CompletedTask;
    }

    void OnChange(string value)
    {
        Color = value;
    }

    private async Task SaveChanges()
    {
        if (isSaving) return;

        isSaving = true;

        if (!editContext.Validate())
        {
            Console.WriteLine("Form validation failed!");
            return;
        }

        bool isSuccess = false;
        var task = DialogService.OpenAsync("", ds => @<BusyDialog />,
        new DialogOptions { ShowTitle = false, CloseDialogOnEsc = false, CssClass = "umh-rz-dialog-size" });

        try
        {
            //var xxxxxx = FarmZoneService.GetFarmZonesAsync().ConfigureAwait(false);
            FarmZoneDto response = await FarmZoneService.CreateUpdateFarmZoneBoundaryAsync(obj).ConfigureAwait(false);
            if (response == null)
            {
                message = "An error occurred while saving your data.";
                await DialogService.Alert($"Error: {message}", "Error");
                DialogService.Close(false);
            }
            else
            {
                message = "Save successful.";
                isSuccess = true;
                await NotificationService.ShowSuccess(message);

                var zoneDetails = new FarmZoneDto
                {
                    ZoneId = ObjId,
                    ZoneName = obj.ZoneName,
                    Description = obj.Description,
                    ZoneColor = obj.ZoneColor,
                    SizeInHectares = obj.SizeInHectares,
                    AreaInSqm = obj.SizeInHectares * 10000,
                    CropId = obj.CropId,
                    CropName = obj.CropName,
                    CropVariety = obj.CropVariety,
                    UnitId = obj.UnitId,
                    UnitName = obj.UnitName
                };
                DialogService.Close(true);
                DialogService.Close(zoneDetails);
            }
        }
        catch (Exception ex)
        {
            await DialogService.Alert($"Error: {ex.Message}", "Error");
            DialogService.Close(false);
        }
        finally
        {
            isSaving = false;
        }
    }

    private async Task LoadCrops()
    {
        var response = await CropService.GetAllCropsAsync().ConfigureAwait(false);
        if (response.IsSuccess)
        {
            crops = response.Data;
            StateHasChanged();
        }
        else
            await NotificationService.ShowError(response.ErrorMessage, response.ErrorTitle);
    }

    private async Task LoadUnits()
    {
        var response = await UnitService.GetAllUnitsAsync().ConfigureAwait(false);
        if (response.IsSuccess)
        {
            units = response.Data;
            StateHasChanged();
        }
        else
            await NotificationService.ShowError(response.ErrorMessage, response.ErrorTitle);
    }

    private void OnCropChange(object value)
    {
        if (value != null)
        {
            obj.CropId = (Guid)value;
            obj.CropName = crops.FirstOrDefault(x => x.CropId == obj.CropId).CropName;
            obj.UnitId = crops.FirstOrDefault(x => x.CropId == obj.CropId).DefaultUnitId;
            obj.UnitName = crops.FirstOrDefault(x => x.CropId == obj.CropId).DefaultUnit;

            StateHasChanged();
        }
    }
}
