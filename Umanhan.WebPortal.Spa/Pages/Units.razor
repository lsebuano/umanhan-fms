@page "/units"
@attribute [Authorize]
@inject DialogService DialogService
@inject AppNotificationService NotificationService
@inject UnitService UnitService

<PermissionView Permission="Masterdata.Full">
    <ChildContent>
        <PageTitle>Units</PageTitle>
        <RadzenBreadCrumb>
            <RadzenBreadCrumbItem Path="/" Text="Home" />
            <RadzenBreadCrumbItem Path="/units" Text="Units" />
        </RadzenBreadCrumb>
        <RadzenText TextStyle="TextStyle.H5" class="rz-my-8">Units</RadzenText>

        @if (units == null)
        {
            <p>Loading...</p>
        }
        else
        {
            <RadzenRow>
                <RadzenColumn Size="12" SizeMD="6">
                    <div class="full-height-container">
                        <RadzenDataGrid AllowFiltering="true" AllowColumnResize="true" AllowAlternatingRows="true" FilterMode="FilterMode.Advanced"
                                        AllowSorting="true" PagerHorizontalAlign="HorizontalAlign.Left" Data="@units" GridLines="DataGridGridLines.Vertical"
                                        ColumnWidth="100%" LogicalFilterOperator="LogicalFilterOperator.Or" SelectionMode="DataGridSelectionMode.Single"
                                        @bind-Value=@selectedObjList IsLoading=@isLoading Page="@ShowLoading" class="umh-height-70vh">
                            <EmptyTemplate>
                                <p class="umh-no-records">No records to display.</p>
                            </EmptyTemplate>
                            <HeaderTemplate>
                                <RadzenButton Text="New" Icon="add" ButtonStyle="ButtonStyle.Primary" Click=@(() => OpenDialog(Guid.Empty))></RadzenButton>
                            </HeaderTemplate>
                            <Columns>
                                <RadzenDataGridColumn Context="obj" Filterable="false" Sortable="false" TextAlign="TextAlign.Center" Frozen="true" Width="120px">
                                    <Template Context="obj">
                                        <RadzenButton Icon="edit" ButtonStyle="ButtonStyle.Base" Variant="Variant.Flat" Size="ButtonSize.Medium"
                                                      Shade="Shade.Lighter" class="rz-my-1 rz-ms-1" Click="@(args => OpenDialog(obj.UnitId))"
                                                      @onclick:stopPropagation="true" title="Edit" />
                                        <RadzenButton Icon="delete" ButtonStyle="ButtonStyle.Base" Variant="Variant.Flat" Size="ButtonSize.Medium"
                                                      Shade="Shade.Lighter" class="rz-my-1 rz-ms-1" Click="@(args => Delete(obj))"
                                                      @onclick:stopPropagation="true" title="Delete" />
                                    </Template>
                                </RadzenDataGridColumn>
                                <RadzenDataGridColumn Property="@nameof(UnitDto.UnitName)" Title="Unit" Frozen="false" />
                            </Columns>
                        </RadzenDataGrid>
                    </div>
                </RadzenColumn>
                <RadzenColumn Size="12" SizeMD="6">
                    <RadzenCard Variant="Variant.Outlined" class="umh-height-100">
                        <RadzenStack Gap="1rem">
                            <RadzenCard Variant="Variant.Text" class="rz-background-color-primary-lighter rz-color-on-primary-lighter">
                                Unit: <b>@selectedObjList.FirstOrDefault()?.UnitName</b>
                            </RadzenCard>
                            <RadzenTabs>
                                <Tabs>
                                    <RadzenTabsItem Text="Crops">
                                        <RadzenDataGrid @ref="cropsGrid" AllowFiltering="true" AllowPaging="true" ShowPagingSummary="true"
                                                        Data="@(selectedObjList.FirstOrDefault()?.Crops)">
                                            <Columns>
                                                <RadzenDataGridColumn Property="@nameof(CropDto.CropName)" Title="Crop" Width="300px" />
                                                <RadzenDataGridColumn Property="@nameof(CropDto.CropVariety)" Title="Variety" />
                                            </Columns>
                                        </RadzenDataGrid>
                                    </RadzenTabsItem>
                                    <RadzenTabsItem Text="Inventories">
                                        <RadzenDataGrid @ref="inventoriesGrid" AllowFiltering="true" AllowPaging="true" ShowPagingSummary="true"
                                                        Data="@(selectedObjList.FirstOrDefault()?.Inventories)">
                                            <Columns>
                                                <RadzenDataGridColumn Property="@nameof(InventoryDto.ItemName)" Title="Item" />
                                            </Columns>
                                        </RadzenDataGrid>
                                    </RadzenTabsItem>
                                </Tabs>
                            </RadzenTabs>
                        </RadzenStack>
                    </RadzenCard>
                </RadzenColumn>
            </RadzenRow>
        }
    </ChildContent>
    <NotAuthorized>
        <Unauthorized />
    </NotAuthorized>
</PermissionView>

@code {
    RadzenDataGrid<CropDto> cropsGrid;
    RadzenDataGrid<InventoryDto> inventoriesGrid;
    private IEnumerable<UnitDto>? units;
    private IList<UnitDto> selectedObjList;
    private bool isLoading;

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync().ConfigureAwait(false);
        await ShowLoading().ConfigureAwait(false);
        await LoadList().ConfigureAwait(false);
    }

    private async Task ShowLoading()
    {
        isLoading = true;
        await Task.Yield();
        isLoading = false;
    }

    private async Task LoadList(Guid? unitId = null)
    {
        var response = await UnitService.GetAllUnitsAsync().ConfigureAwait(false);
        if (response.IsSuccess)
        {
            units = response.Data;
            if (unitId != null || unitId != Guid.Empty)
                selectedObjList = new List<UnitDto>() { units.FirstOrDefault() };
            else
                selectedObjList = new List<UnitDto>() { units.FirstOrDefault(x => x.UnitId == unitId) };
        }
        else
            await NotificationService.ShowError(response.ErrorMessage, response.ErrorTitle);
    }

    private async Task OpenDialog(Guid id)
    {
        var result = await DialogService.OpenAsync<UnitDialog>("Unit",
                    new Dictionary<string, object> { { "ObjId", id } },
                    new DialogOptions()
                        {
                            Width = "50vw",
                            Height = "80vh",
                        });
        // refresh grid if the dialog returns true
        if (result != null)
        {
            await GridReload();
        }
    }

    private async Task GridReload()
    {
        await LoadList();
        await InvokeAsync(StateHasChanged);
    }

    private async Task Delete(UnitDto obj)
    {
        var confirm = await DialogService.Confirm(
                $"Are you sure you want to remove '{obj.UnitName}'?",
                "Confirm Remove",
                new ConfirmOptions { OkButtonText = "Yes", CancelButtonText = "No" }
            );

        if (confirm == true)
        {
            var response = await UnitService.DeleteUnitAsync(obj.UnitId).ConfigureAwait(false);
            if (response != null)
            {
                await NotificationService.ShowSuccess("Delete Successful");
                // refresh grid
                await LoadList();
            }
            else
            {
                await NotificationService.ShowError("Oops! Something went wrong.");
            }
        }
    }
}