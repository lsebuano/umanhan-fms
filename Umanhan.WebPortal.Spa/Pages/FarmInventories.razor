@page "/farm-inventories"
@attribute [Authorize]
@inject AppNotificationService NotificationService
@inject DialogService DialogService
@inject FarmInventoryService FarmInventoryService
@inject InventoryService InventoryService
@inject UnitService UnitService
@inject SystemSettingService SystemSettingService
@inject WebAppSettingService AppSettingService
@inject FarmActivityUsageService FarmActivityUsageService
@inject IValidator<FarmInventoryDto> Validator

<PermissionView Permission="Farm.Full">
    <ChildContent>
        <PageTitle>Farm Inventories</PageTitle>
        <RadzenBreadCrumb>
            <RadzenBreadCrumbItem Path="/" Text="Home" />
            <RadzenBreadCrumbItem Path="/farm-inventories" Text="Farm Inventories" />
        </RadzenBreadCrumb>
        <RadzenRow>
            <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.End" class="rz-my-8">
                <RadzenText TextStyle="TextStyle.H5">Farm Inventories</RadzenText>
                <RadzenBadge BadgeStyle="BadgeStyle.Primary" Variant="Variant.Outlined" IsPill=true Text="@farmName" class="rz-mb-3" Visible="@(!string.IsNullOrEmpty(farmName))" />
            </RadzenStack>
        </RadzenRow>

        <RadzenRow>
            <RadzenColumn SizeMD="7">
                <RadzenDataGrid @ref="farmInventoryGrid" AllowFiltering="true" AllowColumnResize="true" AllowAlternatingRows="true" FilterMode="FilterMode.Advanced" AllowSorting="true"
                                PageSize="15" AllowPaging="true" PagerHorizontalAlign="HorizontalAlign.Left" ShowPagingSummary="true"
                                Data="@farmInventoryItems" ColumnWidth="160px" LogicalFilterOperator="LogicalFilterOperator.Or" SelectionMode="DataGridSelectionMode.Single"
                                @bind-Value=@selectedInventoryItems EditMode="DataGridEditMode.Single" TItem="FarmInventoryDto" RowUpdate="@OnUpdateRowGrid1"
                                RowCreate="@OnCreateRowGrid1" Sort="@ResetGrid1" Page="@ResetGrid1" Filter="@ResetGrid1" RowSelect="@RowSelect1" class="rz-mt-5 umh-height-70vh">
                    <EmptyTemplate>
                        <p class="umh-no-records">No records to display.</p>
                    </EmptyTemplate>
                    <HeaderTemplate>
                        <RadzenButton ButtonStyle="ButtonStyle.Primary" Icon="add" Text="Add Inventory" Click="@InsertRowGrid1" />
                    </HeaderTemplate>
                    <Columns>
                        <RadzenDataGridColumn Context="inv" Filterable="false" Sortable="false" TextAlign="TextAlign.Right" Frozen="true" FrozenPosition="FrozenColumnPosition.Right" Width="160px">
                            <Template Context="inv">
                                <RadzenButton Icon="edit" ButtonStyle="ButtonStyle.Light" Variant="Variant.Flat" Size="ButtonSize.Medium" class="rz-my-1 rz-ms-1" Click="@(args => EditRowGrid1(inv))" @onclick:stopPropagation="true" />
                                <RadzenButton Icon="delete" ButtonStyle="ButtonStyle.Danger" Variant="Variant.Flat" Size="ButtonSize.Medium" Shade="Shade.Lighter" class="rz-my-1 rz-ms-1" Click="@(args => DeleteRowGrid1(inv))" @onclick:stopPropagation="true" />
                                <RadzenButton Icon="add_photo_alternate" ButtonStyle="ButtonStyle.Light" Variant="Variant.Flat" Size="ButtonSize.Medium" Shade="Shade.Lighter" class="rz-my-1 rz-ms-1" Click="@(args => AddPhotoRowGrid1(inv))" @onclick:stopPropagation="true" />
                            </Template>
                            <EditTemplate Context="inv">
                                <RadzenButton Icon="check" ButtonStyle="ButtonStyle.Success" Variant="Variant.Flat" Size="ButtonSize.Medium" Click="@((args) => SaveRowGrid1(inv))" aria-label="Save" />
                                <RadzenButton Icon="close" ButtonStyle="ButtonStyle.Light" Variant="Variant.Flat" Size="ButtonSize.Medium" class="rz-my-1 rz-ms-1" Click="@((args) => CancelEditGrid1(inv))" aria-label="Cancel" />
                                <RadzenButton Icon="delete" ButtonStyle="ButtonStyle.Danger" Variant="Variant.Flat" Size="ButtonSize.Medium" Shade="Shade.Lighter" class="rz-my-1 rz-ms-1" Click="@(args => DeleteRowGrid1(inv))" aria-label="Delete" />
                            </EditTemplate>
                        </RadzenDataGridColumn>
                        <RadzenDataGridColumn Property="@nameof(FarmInventoryDto.InventoryItemName)" Title="Item" Width="300px">
                            <EditTemplate Context="inventory">
                                <RadzenTemplateForm Data="@inventory" EditContext="@GetEditContext(inventory)">
                                    <RadzenDropDown @bind-Value="inventory.InventoryId" Data="@inventoryItems" Placeholder="Select item"
                                                    TextProperty="ItemName" ValueProperty="InventoryId" Name="InventoryId" class="umh-height-100 rz-display-block"
                                                    FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" FilterOperator="StringFilterOperator.Contains"
                                                    AllowFiltering="true" Change="@((args) => OnInventoryChange(args, inventory))" />
                                    <ValidationMessage For="@(() => inventory.InventoryId)" />
                                </RadzenTemplateForm>
                            </EditTemplate>
                        </RadzenDataGridColumn>
                        <RadzenDataGridColumn Title="Photo" Filterable="false" Sortable="false" Width="100px" TextAlign="TextAlign.Center">
                            <Template Context="inv">
                                <RadzenImage Path="@inv.InventoryItemImageS3UrlThumbnail" class="umh-cursor-pointer umh-width-60px" AlternateText="@inv.InventoryItemName" Click="@(() => PreviewPhoto(inv.InventoryItemImageS3UrlFull, inv.InventoryItemName))" />
                            </Template>
                        </RadzenDataGridColumn>
                        <RadzenDataGridColumn Property="@nameof(FarmInventoryDto.InventoryUnit)" Title="Unit" Width="150px">
                            <Template Context="inv">
                                <RadzenBadge BadgeStyle="BadgeStyle.Base" Text="@inv.InventoryUnit" class="umh-padding-10px" />
                            </Template>
                            <EditTemplate Context="inventory">
                                <RadzenTemplateForm Data="@inventory" EditContext="@GetEditContext(inventory)">
                                    <RadzenDropDown @bind-Value="inventory.UnitId" Data="@units" Placeholder="Select unit"
                                                    TextProperty="UnitName" ValueProperty="UnitId" Name="UnitId" class="umh-height-100 rz-display-block" />
                                    <ValidationMessage For="@(() => inventory.UnitId)" />
                                </RadzenTemplateForm>
                            </EditTemplate>
                        </RadzenDataGridColumn>
                        <RadzenDataGridColumn Property="@nameof(FarmInventoryDto.Quantity)" Title="In Stock" Width="180px">
                            <EditTemplate Context="inventory">
                                <RadzenTemplateForm Data="@inventory" EditContext="@GetEditContext(inventory)">
                                    <RadzenNumeric @bind-Value="inventory.Quantity" Min="0" Max="100000"></RadzenNumeric>
                                    <ValidationMessage For="@(() => inventory.Quantity)" />
                                </RadzenTemplateForm>
                            </EditTemplate>
                        </RadzenDataGridColumn>
                    </Columns>
                </RadzenDataGrid>
            </RadzenColumn>

            <RadzenColumn SizeMD="5">
                @if (farmInventoryItems != null && farmInventoryItems.Any())
                {
                    <RadzenCard Variant="Variant.Outlined" class="umh-height-100 rz-mt-5">
                        <RadzenStack Gap="1rem">
                            <RadzenCard Variant="Variant.Text" class="rz-background-color-primary-lighter rz-color-on-primary-lighter">
                                Item: <b>@selectedInventoryItems.FirstOrDefault()?.InventoryItemName</b>
                            </RadzenCard>
                            <RadzenTabs>
                                <Tabs>
                                    <RadzenTabsItem Text="Usages">
                                        <RadzenDataGrid @ref="farmUsagesGrid" AllowFiltering="true" AllowColumnResize="true" AllowAlternatingRows="true" FilterMode="FilterMode.Advanced" AllowSorting="true"
                                                        PageSize="15" AllowPaging="true" PagerHorizontalAlign="HorizontalAlign.Left" ShowPagingSummary="true"
                                                        ColumnWidth="160px" LogicalFilterOperator="LogicalFilterOperator.Or" SelectionMode="DataGridSelectionMode.Single"
                                                        Data="@inventoryUsages" class="rz-mt-5" EditMode="DataGridEditMode.Single" TItem="FarmActivityUsageDto">
                                            <EmptyTemplate>
                                                <p class="umh-no-records">No records to display.</p>
                                            </EmptyTemplate>
                                            <Columns>
                                                <RadzenDataGridColumn Property="@nameof(FarmActivityUsageDto.Timestamp)" FormatString="{0:MM/dd/yyyy}" Title="Date">
                                                    <FooterTemplate>
                                                        Usage count: <b>@inventoryUsages.Count()</b>
                                                    </FooterTemplate>
                                                </RadzenDataGridColumn>
                                                <RadzenDataGridColumn Property="@nameof(FarmActivityUsageDto.Rate)" Title="Rate" />
                                                <RadzenDataGridColumn Property="@nameof(FarmActivityUsageDto.UsageHours)" Title="Usage">
                                                    <FooterTemplate>
                                                        <b>@inventoryUsages.Sum(x => x.UsageHours)</b>
                                                    </FooterTemplate>
                                                </RadzenDataGridColumn>
                                                <RadzenDataGridColumn Property="@nameof(FarmActivityUsageDto.TotalCost)" Title="Total">
                                                    <FooterTemplate>
                                                        <b>@inventoryUsages.Sum(x => x.TotalCost)</b>
                                                    </FooterTemplate>
                                                </RadzenDataGridColumn>
                                            </Columns>
                                        </RadzenDataGrid>
                                    </RadzenTabsItem>
                                </Tabs>
                            </RadzenTabs>
                        </RadzenStack>
                    </RadzenCard>
                }
            </RadzenColumn>
        </RadzenRow>
    </ChildContent>
    <NotAuthorized>
        <Unauthorized />
    </NotAuthorized>
</PermissionView>

@code {
    [CascadingParameter] WebAppSetting Settings { get; set; }

    private IList<FarmInventoryDto> selectedInventoryItems = [];
    private IEnumerable<FarmInventoryDto> farmInventoryItems = [];
    private IEnumerable<UnitDto> units = [];
    private IEnumerable<InventoryDto> inventoryItems = [];

    RadzenDataGrid<FarmInventoryDto> farmInventoryGrid;
    RadzenDataGrid<FarmActivityUsageDto> farmUsagesGrid;

    List<FarmInventoryDto> inventoryItemToInsert = [];
    List<FarmInventoryDto> inventoryItemToUpdate = [];

    Guid farmId;
    string farmName = "Loading...";

    private FarmInventoryDto selectedMaster;
    private IEnumerable<FarmActivityUsageDto> inventoryUsages = [];

    private bool hasLoadedSecondaryData = false;

    Dictionary<FarmInventoryDto, EditContext> editContexts = new();
    Dictionary<EditContext, ValidationMessageStore> stores = new();

    protected override async Task OnInitializedAsync()
    {
        await LoadSettings().ConfigureAwait(false);
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender && !hasLoadedSecondaryData)
        {
            hasLoadedSecondaryData = true;
            _ = Task.Run(async () =>
            {
                await LoadFarmInventories().ConfigureAwait(false);
                await LoadUnits().ConfigureAwait(false);
                await LoadInventoryItems().ConfigureAwait(false);

                InvokeAsync(StateHasChanged); // Safely update the UI after background work
            });
        }
    }

    void OnInventoryChange(object value, FarmInventoryDto inv)
    {
        var id = (Guid)value;
        var invObj = inventoryItems.FirstOrDefault(x => x.InventoryId == id);
        if (invObj is not null)
        {
            inv.UnitId = invObj.UnitId!.Value;
            StateHasChanged();
        }
    }

    async Task LoadSettings()
    {
        //Settings = await AppSettingService.LoadAsync().ConfigureAwait(false);

        farmId = Settings.FarmId;
        farmName = Settings.FarmName ?? "Loading...";
    }

    async Task LoadUnits()
    {
        var response = await UnitService.GetAllUnitsAsync().ConfigureAwait(false);
        if (response.IsSuccess)
            units = response.Data;
        else
            await NotificationService.ShowError(response.ErrorMessage, response.ErrorTitle);
    }

    async Task LoadInventoryItems()
    {
        var response = await InventoryService.GetAllInventoriesAsync().ConfigureAwait(false);
        if (response.IsSuccess)
            inventoryItems = response.Data;
        else
            await NotificationService.ShowError(response.ErrorMessage, response.ErrorTitle);
    }

    async Task LoadFarmInventories()
    {
        var response = await FarmInventoryService.GetFarmInventoriesAsync(Settings.FarmId).ConfigureAwait(false);
        if (response.IsSuccess)
        {
            farmInventoryItems = response.Data;
            StateHasChanged();
        }
        else
            await NotificationService.ShowError(response.ErrorMessage, response.ErrorTitle);
    }

    void ResetGrid1()
    {
        inventoryItemToInsert.Clear();
        inventoryItemToUpdate.Clear();
    }

    void ResetGrid1(FarmInventoryDto inventoryObj)
    {
        inventoryItemToInsert.Remove(inventoryObj);
        inventoryItemToUpdate.Remove(inventoryObj);
    }

    async Task EditRowGrid1(FarmInventoryDto inventoryObj)
    {
        if (!farmInventoryGrid.IsValid) return;

        inventoryItemToUpdate.Add(inventoryObj);
        await farmInventoryGrid.EditRow(inventoryObj);
    }

    async Task AddPhotoRowGrid1(FarmInventoryDto inventoryObj)
    {
        if (!farmInventoryGrid.IsValid) return;

        var result = await DialogService.OpenAsync<UploadPhotoToS3Dialog>("Upload Photo",
    new Dictionary<string, object>()
                            { {"FarmInventoryId", inventoryObj.FarmInventoryId } },
    new DialogOptions() { Width = "500px", Height = "350px" });

        if (result is bool isSuccess)
        {
            await LoadFarmInventories().ConfigureAwait(false);

            //inventoryItemToUpdate.Add(inventoryObj);
            //await farmInventoryGrid.EditRow(inventoryObj);
        }
    }

    async Task OnUpdateRowGrid1(FarmInventoryDto inventoryObj)
    {
        if (!ValidateRow(inventoryObj))
            return;

        var task = DialogService.OpenAsync("", ds => @<BusyDialog />,
        new DialogOptions { ShowTitle = false, CloseDialogOnEsc = false, Style = "min-height:auto;min-width:auto;width:auto" });

        ResetGrid1(inventoryObj);

        var obj = await FarmInventoryService.UpdateFarmInventoryAsync(inventoryObj).ConfigureAwait(false);
        if (obj is not null)
        {
            await farmInventoryGrid.Reload();
            await LoadFarmInventories().ConfigureAwait(false);
            await NotificationService.ShowSuccess("Inventory item successfully updated.");
        }
        else
            await NotificationService.ShowError("Unable to update inventory item.");

        DialogService.Close(null);
    }

    async Task SaveRowGrid1(FarmInventoryDto inventoryObj)
    {
        if (!ValidateRow(inventoryObj))
            return;

        inventoryObj.FarmId = farmId;
        await farmInventoryGrid.UpdateRow(inventoryObj);
    }

    void CancelEditGrid1(FarmInventoryDto inventoryObj)
    {
        ResetGrid1(inventoryObj);

        farmInventoryGrid.CancelEditRow(inventoryObj);
    }

    async Task DeleteRowGrid1(FarmInventoryDto inventoryObj)
    {
        ResetGrid1(inventoryObj);

        if (farmInventoryItems.Contains(inventoryObj))
        {
            var confirm = await DialogService.Confirm(
        $"Are you sure you want to delete '{inventoryObj.InventoryItemName}'?",
        "Confirm Delete",
        new ConfirmOptions { OkButtonText = "Yes", CancelButtonText = "No" }
    );

            if (confirm == true)
            {
                var task = DialogService.OpenAsync("", ds => @<BusyDialog />,
                new DialogOptions { ShowTitle = false, CloseDialogOnEsc = false, Style = "min-height:auto;min-width:auto;width:auto" });

                var obj = await FarmInventoryService.DeleteFarmInventoryAsync(inventoryObj.FarmInventoryId).ConfigureAwait(false);
                if (obj is not null)
                {
                    await farmInventoryGrid.Reload();
                    await LoadFarmInventories().ConfigureAwait(false);
                    await NotificationService.ShowSuccess("Inventory item successfully deleted.");
                }
                else
                    await NotificationService.ShowError("Unable to delete inventory item.");

                DialogService.Close(null);
            }
        }
        else
        {
            farmInventoryGrid.CancelEditRow(inventoryObj);
            await farmInventoryGrid.Reload();
        }
    }

    async Task InsertRowGrid1()
    {
        if (!farmInventoryGrid.IsValid) return;

        var inventoryObj = new FarmInventoryDto();
        inventoryObj.FarmId = farmId;
        inventoryItemToInsert.Add(inventoryObj);

        await farmInventoryGrid.InsertRow(inventoryObj);
    }

    async Task InsertAfterRowGrid1(FarmInventoryDto row)
    {
        if (!farmInventoryGrid.IsValid) return;

        var inventoryObj = new FarmInventoryDto();
        inventoryObj.FarmId = farmId;
        inventoryItemToInsert.Add(inventoryObj);

        await farmInventoryGrid.InsertAfterRow(inventoryObj, row);
    }

    async Task OnCreateRowGrid1(FarmInventoryDto inventoryObj)
    {
        if (!ValidateRow(inventoryObj))
            return;

        var task = DialogService.OpenAsync("", ds => @<BusyDialog />,
        new DialogOptions { ShowTitle = false, CloseDialogOnEsc = false, Style = "min-height:auto;min-width:auto;width:auto" });

        inventoryObj.FarmId = farmId;
        var obj = await FarmInventoryService.CreateFarmInventoryAsync(inventoryObj).ConfigureAwait(false);
        if (obj is not null)
        {
            inventoryItemToInsert.Remove(inventoryObj);
            await LoadFarmInventories().ConfigureAwait(false);
            await NotificationService.ShowSuccess("New inventory item successfully created.");
        }
        else
            await NotificationService.ShowError("Unable to create new inventory item.");

        DialogService.Close(null);
    }

    async Task RowSelect1(FarmInventoryDto row)
    {
        selectedMaster = row;

        var response = await FarmActivityUsageService.GetFarmActivityUsageByItemIdAsync(farmId, row.InventoryId).ConfigureAwait(false);
        if (response.IsSuccess)
        {
            inventoryUsages = response.Data.ToList();
            //StateHasChanged();
        }
        else
            await NotificationService.ShowError(response.ErrorMessage, response.ErrorTitle);
    }

    async Task PreviewPhoto(string imageUrl, string description)
    {
        await DialogService.OpenAsync<PhotoViewerDialog>("Photo Viewer",
        new Dictionary<string, object>()
                { { "ImageUrls", new List<PhotoItem> {
                    new PhotoItem{
                        Url = imageUrl,
                        Notes = description
                    }
                } } },
        new DialogOptions() { Width = "900px", Height = "650px" });
    }

    private EditContext GetEditContext(FarmInventoryDto inventory)
    {
        if (!editContexts.TryGetValue(inventory, out var context))
        {
            context = new EditContext(inventory);
            editContexts[inventory] = context;
        }
        return context;
    }

    bool ValidateRow(FarmInventoryDto inventory)
    {
        var editContext = GetEditContext(inventory);

        if (!stores.TryGetValue(editContext, out var store))
        {
            store = new ValidationMessageStore(editContext);
            stores[editContext] = store;
        }
        store.Clear();

        var result = Validator.Validate(inventory);
        if (!result.IsValid)
        {
            foreach (var error in result.Errors)
            {
                store.Add(editContext.Field(error.PropertyName), error.ErrorMessage);
            }

            editContext.NotifyValidationStateChanged();
            return false;
        }

        return true;
    }
}