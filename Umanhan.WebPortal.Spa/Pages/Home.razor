@page "/"
@attribute [Authorize]
@* @inject WebAppSettingService AppSettingService *@
@inject AuthenticationStateProvider AuthStateProvider
@inject FarmService FarmService
@inject WebAppSetting Settings

<PageTitle>Welcome to umanhan FMS</PageTitle>

@if (!isLoaded)
{
    <RadzenStack Orientation="Orientation.Vertical" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.Center" class="umh-height-80vh">
        <RadzenProgressBarCircular Mode="ProgressBarMode.Indeterminate" Value="100" ShowValue="false" />
        <RadzenText TextStyle="TextStyle.H6" TagName="TagName.H6">Please wait.....</RadzenText>
    </RadzenStack>
}
else if (isFarmSetupComplete)
{
    <Dashboard DashboardType="dashboardType" />
}
else
{
    <SetupFarm />
}

@code {
    // [CascadingParameter] WebAppSetting Settings { get; set; }

    private bool isFarmSetupComplete = false;
    //private bool isFarmSetupStarted = false;
    //private Guid farmId;
    private string farmName = "Loading...";

    private bool isLoaded = false;
    private string componentName = "DefaultDashboard"; // Default dashboard component name
    private Type dashboardType;

    protected override async Task OnInitializedAsync()
    {
        await LoadSettings().ConfigureAwait(false);
    }

    protected override async Task OnParametersSetAsync()
    {
        //Console.WriteLine($"IsLoaded: {Settings.IsLoaded}, IsFarmSetupComplete: {Settings.IsFarmSetupComplete}");
        Console.WriteLine($"IsLoaded: {isLoaded}, IsFarmSetupComplete: {isFarmSetupComplete}");
        if (isFarmSetupComplete)
        {
            await LoadComponent().ConfigureAwait(false);
            LoadDashboard();
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        Console.WriteLine($"Home:OnAfterRenderAsync:firstRender: {firstRender}");
        if (firstRender)
        {
            Console.WriteLine($"Home:OnAfterRenderAsync:firstRender: {firstRender} 2");
            await LoadComponent().ConfigureAwait(false);
            LoadDashboard();
        }
    }

    async Task LoadSettings()
    {
        var response = await FarmService.GetFarmByIdAsync(Settings.FarmId).ConfigureAwait(false);
        if (response.IsSuccess)
        {
            var farm = response.Data;
            isFarmSetupComplete = farm.SetupComplete;
            farmName = farm.FarmName;
            isLoaded = true;

            Settings.FarmName = farm.FarmName;
            Settings.IsFarmSetupComplete = farm.SetupComplete.ToString();
            Settings.IsFarmSetupStarted = farm.SetupStarted.ToString();
            Settings.FarmLat = Convert.ToDouble(farm.Lat ?? 0);
            Settings.FarmLng = Convert.ToDouble(farm.Lng ?? 0);
            Settings.IsLoaded = true;

            StateHasChanged();
        }
        else
        {
            Console.WriteLine("LoadSettings:Error: ", response.ErrorMessage);
        }

        Console.WriteLine($"Home:LoadSettings:Settings.IsLoaded: {Settings.IsLoaded}");
    }

    async Task LoadComponent()
    {
        var authState = await AuthStateProvider.GetAuthenticationStateAsync().ConfigureAwait(false);
        var user = authState.User;
        Console.WriteLine("User: ", user.Identity?.Name);
        if (user.Identity?.IsAuthenticated == true)
        {
            var x = user.FindFirst("dashboard_component")?.Value;
            componentName = x ?? "DefaultDashboard";
            Console.WriteLine("x: ", x);
            Console.WriteLine("componentName: ", componentName);
        }
        Console.WriteLine("dashboard_component: ", componentName);
    }

    void LoadDashboard()
    {
        var componentFullName = $"Umanhan.WebPortal.Spa.Pages.Fragments.{componentName}";
        var assemblyTypes = AppDomain.CurrentDomain.GetAssemblies()
            .SelectMany(a => a.GetTypes());
        // #if DEBUG
        //         foreach (var item in assemblyTypes)
        //         {
        //             Console.WriteLine($"AppDomain.CurrentDomain.Assembly: {item.FullName}");
        //         }
        // #endif
        dashboardType = assemblyTypes.FirstOrDefault(t => t.FullName == componentFullName &&
                                 typeof(IComponent).IsAssignableFrom(t));
        StateHasChanged();
    }
}