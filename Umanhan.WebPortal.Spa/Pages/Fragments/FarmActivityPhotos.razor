@inject AppNotificationService NotificationService
@inject DialogService DialogService
@inject FarmActivityPhotoService FarmActivityPhotoService
@inject FarmInventoryService FarmInventoryService

@if (photos.Any())
{
    <RadzenButton Icon="add" ButtonStyle="ButtonStyle.Base" Text="Add Photos"
                  Size="ButtonSize.Medium" Click="@(OpenDialog)" />

    <RadzenStack Orientation="Orientation.Horizontal" Wrap=FlexWrap.Wrap>
        @foreach (var photo in photos)
        {
            <RadzenCard Variant="Variant.Outlined" class="rz-mt-3 rz-me-3 umh-square-thumbnail">
                <RadzenStack Orientation="Orientation.Vertical" AlignItems="AlignItems.Center">
                    <RadzenImage Path="@photo.PhotoUrlThumbnail" class="umh-clickable-banner" Click="@(() => PreviewPhoto(photo.PhotoUrlFull))" />
                    <RadzenText Text="@photo.Notes" class="umh-text-ellipsis-left" />
                    <RadzenButton Icon="delete" ButtonStyle="ButtonStyle.Danger" Size="ButtonSize.Small" title="Delete photo" Click="@(() => DeletePhoto(photo))" />
                </RadzenStack>
            </RadzenCard>
        }
    </RadzenStack>
}
else
{
    <RadzenButton Icon="add" ButtonStyle="ButtonStyle.Base" Text="Add Photos"
                  Size="ButtonSize.Medium" Click="@(OpenDialog)" />
}

@code {
    [Parameter]
    public FarmActivityDto Model { get; set; }

    private List<FarmActivityPhotoDto> photos = [];

    protected override async Task OnInitializedAsync()
    {
        await LoadPhotos().ConfigureAwait(false);
    }

    async Task LoadPhotos()
    {
        var response = await FarmActivityPhotoService.GetFarmActivityPhotoByActivityAsync(Model.ActivityId).ConfigureAwait(false);
        if (response.IsSuccess)
        {
            photos = response.Data.ToList();
        }
    }

    private async Task OpenDialog()
    {
        var result = await DialogService.OpenAsync<UploadFarmPhotoToS3Dialog>("Add Photos",
                    new Dictionary<string, object> { { "ActivityId", Model.ActivityId }, { "AllowMultiple", true } },
                    new DialogOptions()
                    {
                        Width = "60vw",
                        Height = "50vh",
                    });
        // refresh grid if the dialog returns true
        if (result != null)
        {
            photos.Add(result);
            StateHasChanged();
        }
    }

    async Task DeletePhoto(FarmActivityPhotoDto photo)
    {
        var confirm = await DialogService.Confirm("Are you sure you want to delete this photo?", "Confirm Delete", new ConfirmOptions { OkButtonText = "Yes", CancelButtonText = "No" });
        if (confirm.HasValue && confirm.Value)
        {
            await FarmActivityPhotoService.DeleteFarmActivityPhotoAsync(photo.PhotoId).ConfigureAwait(false);
            photos.Remove(photo);

            _ = NotificationService.ShowSuccess("Photo deleted successfully.", "Success");
        }
    }

    async Task PreviewPhoto(string imageUrl)
    {
        await DialogService.OpenAsync<PhotoViewerDialog>("Photo Viewer",
        new Dictionary<string, object>() {
            { "ImageUrls", photos.Select(x => new PhotoItem{
                Url = x.PhotoUrlFull,
                Notes = x.Notes
            }).ToList() },
            { "DefaultImageUrl", imageUrl }
        },
        new DialogOptions()
        {
            Width = "900px",
            Height = "650px"
        });
    }
}
