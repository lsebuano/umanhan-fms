@* @page "/farm-management" *@
@attribute [Authorize]
@inject IJSRuntime JSRuntime

<PermissionView Permission="Farm.Full">
    <ChildContent>
        <PageTitle>Farm Management</PageTitle>
        <RadzenBreadCrumb>
            <RadzenBreadCrumbItem Path="/" Text="Home" />
            <RadzenBreadCrumbItem Path="/farm-management" Text="Farm Management" />
        </RadzenBreadCrumb>
        <RadzenText TextStyle="TextStyle.H5" class="rz-my-8">Farm Management</RadzenText>
        <div id="map" class="umh-width-100 umh-height-800px" ></div>
    </ChildContent>
    <NotAuthorized>
        <Unauthorized />
    </NotAuthorized>
</PermissionView>

@code {
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            // Initialize the map with a center position and zoom level.
            await JSRuntime.InvokeVoidAsync("googleMapsInterop.initialize", "map", 37.7749, -122.4194, 12);
        }
    }

    // This method will be invoked from JavaScript when a polygon is complete.
    [JSInvokable]
    public static Task OnPolygonComplete(string polygonCoordinatesJson)
    {
        // Parse the JSON and handle the polygon data, e.g., saving zone boundaries or drawing new zones.
        //Console.WriteLine($"Polygon drawn with coordinates: {polygonCoordinatesJson}");
        // For example, open a dialog in your farm management system to let the user label and color the zone.
        return Task.CompletedTask;
    }

    [JSInvokable]
    public static Task OnZoneClicked(string zoneCoordinatesJson)
    {
        // Parse the JSON and prompt the user for additional setup (label, configuration, etc.)
        //Console.WriteLine($"Zone clicked with coordinates: {zoneCoordinatesJson}");
        // Open a modal or navigate to a zone configuration page.
        return Task.CompletedTask;
    }
}